-- Drop existing tables if they exist
DROP TABLE IF EXISTS public.question_tags;
DROP TABLE IF EXISTS public.answers;
DROP TABLE IF EXISTS public.questions;
DROP TABLE IF EXISTS public.tags;

-- Create tables with the correct structure
CREATE TABLE IF NOT EXISTS public.momsquestions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id),
    content TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.answers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id BIGINT REFERENCES public.momsquestions(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users(id),
    content TEXT,
    is_accepted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.question_tags (
    question_id BIGINT REFERENCES public.momsquestions(id) ON DELETE CASCADE,
    tag_id BIGINT REFERENCES public.tags(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (question_id, tag_id)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_momsquestions_user_id ON public.momsquestions(user_id);
CREATE INDEX IF NOT EXISTS idx_answers_question_id ON public.answers(question_id);
CREATE INDEX IF NOT EXISTS idx_answers_user_id ON public.answers(user_id);
CREATE INDEX IF NOT EXISTS idx_tags_name ON public.tags(name);

-- Enable RLS
ALTER TABLE public.momsquestions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.answers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.question_tags ENABLE ROW LEVEL SECURITY;

-- Create policies
-- Questions
CREATE POLICY "Questions are viewable by everyone"
    ON public.momsquestions FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can create questions"
    ON public.momsquestions FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own questions"
    ON public.momsquestions FOR UPDATE
    TO authenticated
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own questions"
    ON public.momsquestions FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Answers
CREATE POLICY "Answers are viewable by everyone"
    ON public.answers FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can create answers"
    ON public.answers FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own answers"
    ON public.answers FOR UPDATE
    TO authenticated
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own answers"
    ON public.answers FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Tags
CREATE POLICY "Tags are viewable by everyone"
    ON public.tags FOR SELECT
    TO authenticated
    USING (true);

-- Question Tags
CREATE POLICY "Question tags are viewable by everyone"
    ON public.question_tags FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can manage tags for own questions"
    ON public.question_tags
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.momsquestions
            WHERE id = question_id AND user_id = auth.uid()
        )
    ); 